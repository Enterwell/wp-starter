// SCSS Mixins
//
// Note: most of these mixins can't be used with CSS variables, because CSS variables are resolved at runtime, while
//       SCSS is precompiled

// Mixin for responsive content, defines min
// and max width of the screen on which @content styles
// are applied
//
@mixin respondBetween($min: 0, $max: 0) {

  // have both
  @if $min > 0 and $max > 0 {
    @media only screen and (min-width: $min) and (max-width: $max) {
      @content;
    }
  }
    // have min
  @else if $min > 0 and $max <= 0 {
    @media only screen and (min-width: $min) {
      @content;
    }
  }
    // have max
  @else if $min <= 0 and $max > 0 {
    @media only screen and (max-width: $max) {
      @content;
    }
  }
}

// Mixin for removing default browser link styles (and hover, focus and visited states)
// It replaces all current built-in styles with simple
//
// IMPORTANT: only to be used for simple link styles (for example, in post content)
// If more complicated link styling is required, build a new mixin
//
@mixin simpleLinkStyles($color, $hoverColor: null, $textDecoration: none, $hoverTextDecoration: none) {

  color: $color;
  transition: all 150ms ease-in;
  text-decoration: $textDecoration;

  &:visited {
    color: $color;
  }

  &:hover, &:focus {
    text-decoration: $hoverTextDecoration;
    cursor: pointer;

    @if ($hoverColor != null) {
      color: $hoverColor;
    } @else {
      color: $color;
    }

  }
}

// Mixin that creates responsive container that behaves like image
// (contains it width/height ratio, and adopts height depending on the available width)
//
// Mostly used for images.
@mixin responsiveImageContainer($width, $height) {
  position: relative;
  display: block;
  width: 100%;
  padding: 0;
  overflow: hidden;

  &:before {
    display: block;
    content: "";
    padding-top: percentage($height/$width);
    clear: both;
  }

  &:after {
    display: block;
    clear: both;
    content: "";
  }
}
