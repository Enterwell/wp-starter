### Ansible playbook for staging environment
### This playbook is prepared for deploying to Enterwells dedicated staging server which already has technical environment
### installed
### IMPORTANT! adapt this if you need to deploy it to other staging environment

- hosts: stage
  vars_files:
    - "../vars/default.yml"
    - "../vars/stage.yml"
  tasks:
    - name: Create project directory
      ansible.builtin.file:
        path: "{{ project_path }}"
        state: directory
        mode: '0755'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      become: true
      tags: [ system ]

    - name: Create nginx conf in sites-available
      template:
        src: ../files/nginx.conf.j2
        dest: "/etc/nginx/sites-available/{{ http_host }}"
        owner: root
        group: root
      become: true
      tags: [ nginx ]

    - name: Check if varnish backend directive set
      lineinfile:
        state: absent
        path: /etc/varnish/default.vcl
        search_string: 'backend {{ http_host|replace(".", "_") }}'
      check_mode: true
      changed_when: false
      register: check_backend
      become: true
      tags: [ varnish ]

    - name: Add varnish conf backend entry
      lineinfile:
        state: present
        path: /etc/varnish/default.vcl
        insertafter: "^# Ansible backends"
        firstmatch: true
        line: 'backend {{ http_host|replace(".", "_") }} { .host = "{{ http_host }}"; .port = "8080"; }'
      when: check_backend.found == 0
      become: true
      tags: [ varnish ]

    - name: Check if varnish host directive set
      lineinfile:
        state: absent
        path: /etc/varnish/default.vcl
        search_string: 'if ( req.http.host == "^(?i){{ http_host }}"'
      check_mode: true
      changed_when: false
      register: check_host
      become: true
      tags: [ varnish ]

    - name: Add varnish conf host entry
      lineinfile:
        state: present
        path: /etc/varnish/default.vcl
        insertafter: "^# Ansible hosts"
        firstmatch: true
        line: 'if ( req.http.host == "^(?i){{ http_host }}" || req.http.host == "(?i)www.{{ http_host }}" ) { set req.backend_hint = {{ http_host|replace(".", "_") }}; }'
      when: check_host.found == 0
      become: true
      tags: [ varnish ]

    - name: Symlink nginx conf to sites-enabled
      file:
        src: "/etc/nginx/sites-available/{{ http_host }}"
        dest: "/etc/nginx/sites-enabled/{{ http_host }}"
        state: link
      become: true
      tags: [ nginx ]

    - name: (re)Start nginx
      shell: service nginx restart
      become: true
      tags: [ system, nginx ]

    - name: Install SSL certificate
      command: >
        certbot --nginx -d {{http_host}} 
        -m support@enterwell.net 
        --agree-tos --noninteractive --redirect 
        --post-hook "/bin/true"
      register: certbot_output
      changed_when: "'Running post-hook command' in certbot_output.stdout"
      become: true
      tags: [ ssl ]

    - name: (re)Start nginx
      shell: service nginx restart
      become: true
      tags: [ system, nginx ]

    - name: (re)Start varnish
      shell: service varnish restart
      become: true
      tags: [ system, varnish ]

    - name: Install (mysql_db) database requirement package
      apt:
        name: python3-pymysql
      become: true
      tags: [ system ]

    - name: Create empty database
      community.mysql.mysql_db:
        name: "{{ mysql_db }}"
        state: present
        login_host: "{{ mysql_host }}"
        login_user: "{{ mysql_root_user }}"
        login_password: "{{ mysql_root_password }}"
        login_unix_socket: /var/run/mysqld/mysqld.sock
      become: true
      tags: [ mysql ]

    - name: Create database user with privileges to previously created database
      community.mysql.mysql_user:
        state: present
        host: "{{ mysql_host }}"
        login_unix_socket: /var/run/mysqld/mysqld.sock
        name: "{{ mysql_user }}"
        password: "{{ mysql_password }}"
        priv: "{{ mysql_db }}.*: ALL,GRANT"
      become: true
      tags: [ mysql ]

    - name: Create wp-config.php in project
      template:
        src: ../files/wp-config.php.j2
        dest: "{{ project_path }}/wp-config.php"
      become: true
      tags: [ project ]